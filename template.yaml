AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: 'WasteWise 完整生产环境部署 - 自动创建 VPC、子网、网关和 Lambda（无 NAT 网关）'

Parameters:
  DatabaseUrl:
    Type: String
    NoEcho: true
    Description: Database connection URL
    Default: ''

  AdminPrivateKey:
    Type: String
    Description: Admin wallet private key
    NoEcho: true
    Default: ''

  AdminWalletAddress:
    Type: String
    Description: Admin wallet address
    Default: ''

  PinataApiKey:
    Type: String
    Description: Pinata API key
    NoEcho: true
    Default: ''

  PinataSecretApiKey:
    Type: String
    Description: Pinata secret API key
    NoEcho: true
    Default: ''

  PinataJwt:
    Type: String
    Description: Pinata JWT token
    NoEcho: true
    Default: ''

  MastraApiUrl:
    Type: String
    Description: Mastra API URL
    Default: 'http://localhost:4111'

  MastraTimeoutMs:
    Type: String
    Description: Mastra API timeout in milliseconds
    Default: '120000'

  MastraRetryCount:
    Type: String
    Description: Mastra API retry count
    Default: '3'

Globals:
  Function:
    Timeout: 300
    MemorySize: 2048
    Runtime: nodejs20.x
    Architectures: ['arm64']
    Environment:
      Variables:
        PRISMA_SCHEMA_DISABLE_ADVISORY_LOCK: '1'
        PRISMA_GENERATE_SKIP_DOWNLOAD: 'true'
        PRISMA_CLI_QUERY_ENGINE_TYPE: 'library'
        PRISMA_ENGINE_PROTOCOL: 'binary'
        APP_ENV: 'production'
        NODE_ENV: 'production'
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    EphemeralStorage:
      Size: 1024
  Api:
    OpenApiVersion: '3.0.1'
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'Content-Type,Authorization,X-Requested-With'"
      AllowOrigin: "'*'"
      MaxAge: 600

Resources:
  WasteWiseVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: wastewise-vpc
        - Key: Environment
          Value: production
        - Key: Project
          Value: wastewise

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: wastewise-igw
        - Key: Environment
          Value: production

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WasteWiseVPC
      InternetGatewayId: !Ref InternetGateway

  # 公共子网 (5个)
  PublicSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WasteWiseVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Sub '${AWS::Region}a'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: wastewise-public-1a

  PublicSubnet1B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WasteWiseVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Sub '${AWS::Region}b'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: wastewise-public-1b

  PublicSubnet1C:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WasteWiseVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Sub '${AWS::Region}c'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: wastewise-public-1c

  PublicSubnet1D:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WasteWiseVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Sub '${AWS::Region}d'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: wastewise-public-1d

  PublicSubnet1E:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WasteWiseVPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Sub '${AWS::Region}e'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: wastewise-public-1e

  # 公共路由表
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WasteWiseVPC
      Tags:
        - Key: Name
          Value: wastewise-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1A
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation1B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1B
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1C
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation1D:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1D
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation1E:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1E
      RouteTableId: !Ref PublicRouteTable

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for WasteWise Lambda functions
      VpcId: !Ref WasteWiseVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS outbound
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP outbound
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
          Description: DNS queries
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
          Description: PostgreSQL database access
      Tags:
        - Key: Name
          Value: wastewise-lambda-sg

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: api
      Description: WasteWise API Gateway
      Auth:
        DefaultAuthorizer: NONE
      Tags:
        Name: wastewise-api
        Environment: production

  NestjsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: waste-classification-api-production
      Description: 'WasteWise NestJS Backend API'
      CodeUri: dist/
      Handler: lambda.handler
      MemorySize: 3008
      Timeout: 300
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet1A
          - !Ref PublicSubnet1B
          - !Ref PublicSubnet1C
      Environment:
        Variables:
          DATABASE_URL: !Ref DatabaseUrl
          DATABASE_URL_READ: !Ref DatabaseUrl
          DATABASE_URL_WRITE: !Ref DatabaseUrl
          DATABASE_CONNECTION_LIMIT: '2'
          ADMIN_PRIVATE_KEY: !Ref AdminPrivateKey
          ADMIN_WALLET_ADDRESS: !Ref AdminWalletAddress
          PINATA_API_KEY: !Ref PinataApiKey
          PINATA_SECRET_API_KEY: !Ref PinataSecretApiKey
          PINATA_JWT: !Ref PinataJwt
          MASTRA_API_URL: !Ref MastraApiUrl
          MASTRA_TIMEOUT_MS: !Ref MastraTimeoutMs
          MASTRA_RETRY_COUNT: !Ref MastraRetryCount
          VPC_ID: !Ref WasteWiseVPC
          SUBNET_IDS: !Sub '${PublicSubnet1A},${PublicSubnet1B},${PublicSubnet1C}'
          SECURITY_GROUP_ID: !Ref LambdaSecurityGroup
      Events:
        RootApi:
          Type: Api
          Properties:
            Path: /
            Method: ANY
            RestApiId: !Ref Api
        ProxyApi:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref Api
      AutoPublishAlias: live
      Tags:
        Name: wastewise-backend
        Environment: production

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/waste-classification-api-production'
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: wastewise-logs
        - Key: Environment
          Value: production

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/api/'
    Export:
      Name: !Sub '${AWS::StackName}-API-URL'

  LambdaFunction:
    Description: Lambda Function ARN
    Value: !GetAtt NestjsFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-FUNCTION-ARN'

  VPCId:
    Description: VPC ID
    Value: !Ref WasteWiseVPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC-ID'

  PublicSubnetIds:
    Description: Public subnet IDs
    Value: !Sub '${PublicSubnet1A},${PublicSubnet1B},${PublicSubnet1C},${PublicSubnet1D},${PublicSubnet1E}'
    Export:
      Name: !Sub '${AWS::StackName}-PUBLIC-SUBNETS'

  LambdaSecurityGroupId:
    Description: Lambda security group ID
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-LAMBDA-SG'

  InternetGatewayId:
    Description: Internet Gateway ID
    Value: !Ref InternetGateway
    Export:
      Name: !Sub '${AWS::StackName}-IGW-ID'
